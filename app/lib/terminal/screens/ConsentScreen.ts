import { BaseScreen } from "./BaseScreen";
import { TERMINAL_COLORS } from "../Terminal";

export class ConsentScreen extends BaseScreen {
  private warningText = `
█▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀█
█                           ! WARNING !                                █
█                                                                      █
█  The following contains a Neurolinguistic Virus embedded in its      █
█  contents. Any perceptual, cognitive or ontological effects that may █
█  result with the reading of what follows is not the responsibility   █
█  of the author.                                                      █
█                                                                      █
█  All artifacts generated by your participation are an intrinsic part █
█  of the experience.                                                  █
█                                                                      █
█  Proceed with caution, and please, enjoy your stay with us!          █
█                                                                      █
█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█`.trim();

  async render(): Promise<void> {
    // Show warning text
    await this.printCentered(this.warningText.split("\n"));

    await this.printCentered(["", "Do you accept these terms? (y/n)"]);

    // Handle user input
    const handleInput = (e: KeyboardEvent) => {
      if (e.key.toLowerCase() === "y") {
        window.removeEventListener("keydown", handleInput);
        this.processAcceptance();
      } else if (e.key.toLowerCase() === "n") {
        window.removeEventListener("keydown", handleInput);
        this.processDenial();
      }
    };

    window.addEventListener("keydown", handleInput);
  }

  private async processAcceptance() {
    await this.terminal.clear();
    await this.printCentered([
      "NEUROLINGUISTIC VIRUS ACTIVATION SEQUENCE INITIATED",
    ]);

    // Show loading bar
    const totalSteps = 20;
    for (let i = 0; i <= totalSteps; i++) {
      const progress = Math.floor((i / totalSteps) * 100);
      const barWidth = 50;
      const filled = Math.floor((barWidth * i) / totalSteps);
      const empty = barWidth - filled;

      const bar = `[${"█".repeat(filled)}${"-".repeat(empty)}] ${progress}%`;

      await this.terminal.print(this.centerText(bar), {
        color: TERMINAL_COLORS.warning,
        speed: "instant",
      });

      if (i < totalSteps) {
        await new Promise((resolve) => setTimeout(resolve, 100));
        await this.terminal.clear();
        await this.printCentered([
          "NEUROLINGUISTIC VIRUS ACTIVATION SEQUENCE INITIATED",
        ]);
      }
    }

    await this.printCentered([
      "",
      "VIRUS SUCCESSFULLY DEPLOYED",
      "NEURAL PATHWAYS COMPROMISED",
      "REALITY FILTERS DISABLED",
      "",
      "PROCEEDING TO MAIN INTERFACE...",
    ]);

    await new Promise((resolve) => setTimeout(resolve, 2000));
    await this.transition("main", { type: "fade", duration: 1000 });
  }

  private async processDenial() {
    await this.printCentered([
      "",
      "ACTIVATION SEQUENCE ABORTED",
      "TERMINATING CONNECTION...",
    ]);

    await new Promise((resolve) => setTimeout(resolve, 2000));
    window.close(); // Attempt to close window
    // If window.close() fails (most browsers block it), show alternative message
    await this.terminal.clear();
    await this.printCentered([
      "CONNECTION TERMINATED",
      "Please close your browser window.",
    ]);
  }

  async cleanup(): Promise<void> {
    await this.terminal.clear();
  }
}
